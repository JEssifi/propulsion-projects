{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { login, logout, listBestRestaurants, getRestaurants, search, getCategories, getReviews, getUsers } from \"./types\";\nconst initialState = {\n  token: null,\n  userAuth: null,\n  error: null,\n  bestRestaurants: []\n};\nconst initialStateRegister = {\n  token: null,\n  userAuth: null,\n  error: null,\n  bestRestaurants: []\n};\n\nconst registerReducer = (state = initialStateRegister, action) => {\n  switch (action.type) {\n    case email:\n      return {\n        email: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst loginReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case login:\n      return {\n        token: action.payload,\n        userAuth: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst logoutReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case logout:\n      return {\n        token: null,\n        userAuth: null,\n        error: null\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst restaurantsReducer = (state = {\n  restaurants: []\n}, action) => {\n  switch (action.type) {\n    case getRestaurants:\n      return {\n        restaurants: action.payload\n      };\n\n    case search:\n      return {\n        restaurants: action.payload\n      };\n\n    case listBestRestaurants:\n      return { ...state,\n        bestRestaurants: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst categoriesReducer = (state = {\n  categories: []\n}, action) => {\n  switch (action.type) {\n    case getCategories:\n      return {\n        categories: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst reviewsReducer = (state = {\n  reviews: []\n}, action) => {\n  switch (action.type) {\n    case getReviews:\n      return {\n        reviews: action.payload\n      };\n\n    case search:\n      return {\n        reviews: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst usersReducer = (state = {\n  users: []\n}, action) => {\n  switch (action.type) {\n    case getUsers:\n      return {\n        users: action.payload\n      };\n\n    case search:\n      return {\n        users: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst allReducers = combineReducers({\n  login: loginReducer,\n  logout: logoutReducer,\n  restaurants: restaurantsReducer,\n  categories: categoriesReducer,\n  reviews: reviewsReducer,\n  users: usersReducer\n});\nexport default allReducers;","map":{"version":3,"sources":["/Users/jamilessifi/Desktop/Luna/frontend/src/store/reducer.js"],"names":["combineReducers","login","logout","listBestRestaurants","getRestaurants","search","getCategories","getReviews","getUsers","initialState","token","userAuth","error","bestRestaurants","initialStateRegister","registerReducer","state","action","type","email","payload","loginReducer","logoutReducer","restaurantsReducer","restaurants","categoriesReducer","categories","reviewsReducer","reviews","usersReducer","users","allReducers"],"mappings":"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","sourcesContent":["import { combineReducers } from \"redux\";\nimport { login, logout, listBestRestaurants, getRestaurants, search, getCategories, getReviews, getUsers } from \"./types\";\n\n\nconst initialState = {\n    token: null,\n    userAuth: null,\n    error: null,\n    bestRestaurants: []\n};\n\n\nconst initialStateRegister = {\n    token: null,\n    userAuth: null,\n    error: null,\n    bestRestaurants: []\n};\n\n\nconst registerReducer = (state = initialStateRegister, action) => {\n    switch (action.type) {\n        case email:\n            return {\n                email: action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\n\n\n\nconst loginReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case login:\n            return {\n                token: action.payload,\n                userAuth: true,\n            };\n        default:\n            return state;\n    }\n};\n\nconst logoutReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case logout:\n            return {\n                token: null,\n                userAuth: null,\n                error: null\n            };\n        default:\n            return state;\n    }\n};\n\nconst restaurantsReducer = (state = { restaurants: [] }, action) => {\n    switch (action.type) {\n        case getRestaurants:\n            return {\n                restaurants: action.payload\n            };\n        case search:\n            return {\n                restaurants: action.payload\n            };\n        case listBestRestaurants:\n            return {\n                ...state,\n                bestRestaurants: action.payload\n            }\n        default:\n            return state;\n    }\n};\n\nconst categoriesReducer = (state = { categories: [] }, action) => {\n    switch (action.type){\n        case getCategories:\n            return{\n                categories: action.payload\n            };\n        default:\n            return state;\n    }\n};\n\nconst reviewsReducer = (state = { reviews: [] }, action) => {\n    switch (action.type){\n        case getReviews:\n            return{\n                reviews: action.payload\n            };\n        case search:\n            return {\n                reviews: action.payload\n            };\n        default:\n            return state;\n    }\n};\n\nconst usersReducer = (state = { users: [] }, action) => {\n    switch (action.type){\n        case getUsers:\n            return{\n                users: action.payload\n            };\n        case search:\n            return {\n                users: action.payload\n            };\n        default:\n            return state;\n    }\n};\n\n\n\nconst allReducers = combineReducers({\n    login: loginReducer,\n    logout: logoutReducer,\n    restaurants: restaurantsReducer,\n    categories: categoriesReducer,\n    reviews: reviewsReducer,\n    users: usersReducer,\n});\n\nexport default allReducers;\n"]},"metadata":{},"sourceType":"module"}